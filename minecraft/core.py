from minecraft import commands
from minecraft.types import score
from minecraft.types import scoreboard

import dataclasses
import typing
import json
import shutil
import os


class Minecraft:
    # Stores other classes
    Commands: commands.Commands
    Score: score.Score | typing.Callable[[str, int | score.Score], score.Score]
    Scoreboard: scoreboard.Scoreboard | typing.Callable[[str, str], scoreboard.Scoreboard]

    # Stores temporary variables
    @dataclasses.dataclass
    class Temporary:
        function: typing.List[str]

    temporary = Temporary(
        function=list()
    )

    # Stores results
    @dataclasses.dataclass
    class Generated:
        functions: typing.Dict[str, typing.List[str]]
        attributes: typing.Dict[str, str]

    generated = Generated(
        functions=dict(),
        attributes=dict()
    )

    # Stores settings
    @dataclasses.dataclass
    class Settings:
        directory: str
        description: str
        project_name: str
        prefix_generated: str
        version: str = '1.19.2'
        pack_format: int = 0

    settings = Settings(
        directory='./',
        description='generated by Butter\'s compiler',
        project_name='untitled',
        prefix_generated=''
    )

    def __init__(self, settings: None | Settings = None):
        if settings is not None:
            self.settings = settings

        # Calculates pack format
        version = list(map(int, self.settings.version.split('.')))
        version = [version[i] if i < len(version) else 0 for i in range(3)]
        match version:
            case [1, 13, x] if 2 >= x >= 0:
                self.settings.pack_format = 4
            case [1, 14, x] if 4 >= x >= 0:
                self.settings.pack_format = 4
            case [1, 15, x] if 2 >= x >= 0:
                self.settings.pack_format = 5
            case [1, 16, x] if 1 >= x >= 0:
                self.settings.pack_format = 5
            case [1, 16, x] if 5 >= x >= 2:
                self.settings.pack_format = 6
            case [1, 17, x] if 1 >= x >= 0:
                self.settings.pack_format = 7
            case [1, 18, x] if 1 >= x >= 0:
                self.settings.pack_format = 8
            case [1, 18, 2]:
                self.settings.pack_format = 9
            case [1, 19, x] if 2 >= x >= 0:
                self.settings.pack_format = 10

        self.__generate_tree__()

        # Sets classes
        self.Commands = commands.Commands(self)
        self.Score = score._Score(self)
        self.Scoreboard = scoreboard.getScoreboard(self)

    # Generates datapack directories
    def __generate_tree__(self):
        # Jumps to main directory
        os.chdir(self.settings.directory)

        # Deletes trash
        if os.path.exists(self.settings.project_name):
            shutil.rmtree(self.settings.project_name)

        # Generates project directory
        os.mkdir(self.settings.project_name)
        os.chdir(self.settings.project_name)

        # Generates data
        os.mkdir(f'data')

        # Generates functions
        os.mkdir(f'data/{self.settings.prefix_generated}{self.settings.project_name}')
        os.mkdir(f'data/{self.settings.prefix_generated}{self.settings.project_name}/functions')

        # Generates minecraft
        os.mkdir(f'data/minecraft')
        os.mkdir(f'data/minecraft/tags')
        os.mkdir(f'data/minecraft/tags/functions')

    def compile(self, build: str = 'debug'):
        with open('pack.mcmeta', 'w') as file:
            file.write(
                json.dumps(
                    {
                        "pack": {
                            "pack_format": self.settings.pack_format,
                            "description": self.settings.description
                        }
                    },
                    indent=4
                )
            )

        # Generates attributes
        for attribute, function_name in self.generated.attributes.items():
            with open(f'data/minecraft/tags/functions/{attribute}.json', 'w') as file:
                file.write(
                    json.dumps(
                        {
                            "replace": False,
                            "values": [
                                f"{self.settings.prefix_generated}{self.settings.project_name}:{function_name}"
                            ]
                        },
                        indent=4
                    )
                )

        # Generates function files
        for name, function in self.generated.functions.items():
            with open(f'data/{self.settings.prefix_generated}{self.settings.project_name}/'
                      f'functions/{name}.mcfunction', 'w') as file:
                file.write('\n'.join(function))

        print(*self.generated.functions.items())
