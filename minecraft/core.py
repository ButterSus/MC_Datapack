from minecraft import commands
from minecraft.types import score
from minecraft.types import scoreboard
from minecraft import constants as const

import dataclasses
import typing
import json
import shutil
import os


# Stores settings
@dataclasses.dataclass
class Settings:
    directory: str = './'
    description: str = 'generated by Butter\'s compiler'
    project_name: str = 'untitled'
    prefix_generated: str = ''
    version: str = '1.19.2'
    pack_format: int = 0


class Minecraft:
    # Stores other classes
    Commands: commands.Commands
    Score: score.Score.__class__
    Scoreboard: scoreboard.Scoreboard.__class__

    # Stores temporary variables
    @dataclasses.dataclass
    class Temporary:
        returning: typing.List[score.Score.__class__] = dataclasses.field(default_factory=list)
        variables: typing.List[score.Score.__class__] = dataclasses.field(default_factory=list)
        function: typing.List[str] = dataclasses.field(default_factory=list)

    temporary = Temporary()

    # Stores results
    @dataclasses.dataclass
    class Generated:
        functions: typing.Dict[str, typing.List[str]]
        attributes: typing.Dict[str, typing.List[str]]
        scores: typing.Set[tuple[score.Score, int]] = dataclasses.field(default_factory=set)
        scoreboards: typing.Set[scoreboard.Scoreboard] = dataclasses.field(default_factory=set)

    generated = Generated(
        functions={
            f'__{const.setupFunctionName}': list()
        },
        attributes={
            'load': [f'__{const.setupFunctionName}'],
            'tick': []
        }
    )
    
    prefixName: str

    def __init__(self, settings: None | Settings = None):
        if settings is not None:
            self.settings = settings
        else:
            self.settings = Settings()
        
        self.prefixName = f'{self.settings.prefix_generated}{self.settings.project_name}'

        # Calculates pack format
        version = list(map(int, self.settings.version.split('.')))
        version = [version[i] if i < len(version) else 0 for i in range(3)]
        match version:
            case [1, 13, x] if 2 >= x >= 0:
                self.settings.pack_format = 4
            case [1, 14, x] if 4 >= x >= 0:
                self.settings.pack_format = 4
            case [1, 15, x] if 2 >= x >= 0:
                self.settings.pack_format = 5
            case [1, 16, x] if 1 >= x >= 0:
                self.settings.pack_format = 5
            case [1, 16, x] if 5 >= x >= 2:
                self.settings.pack_format = 6
            case [1, 17, x] if 1 >= x >= 0:
                self.settings.pack_format = 7
            case [1, 18, x] if 1 >= x >= 0:
                self.settings.pack_format = 8
            case [1, 18, 2]:
                self.settings.pack_format = 9
            case [1, 19, x] if 2 >= x >= 0:
                self.settings.pack_format = 10

        self.__generate_tree__()

        # Sets classes
        self.Commands = commands.Commands(self)
        self.Score = score.Score
        self.Score.framework = self
        self.Scoreboard = scoreboard.Scoreboard
        self.Scoreboard.framework = self

    # Generates datapack directories
    def __generate_tree__(self):
        # Jumps to main directory
        os.chdir(self.settings.directory)

        # Deletes trash
        if os.path.exists(self.settings.project_name):
            shutil.rmtree(self.settings.project_name)

        # Generates project directory
        os.mkdir(self.settings.project_name)
        os.chdir(self.settings.project_name)

        # Generates data
        os.mkdir(f'data')

        # Generates functions
        os.mkdir(f'data/{self.settings.prefix_generated}{self.settings.project_name}')
        os.mkdir(f'data/{self.settings.prefix_generated}{self.settings.project_name}/functions')

        # Generates minecraft
        os.mkdir(f'data/minecraft')
        os.mkdir(f'data/minecraft/tags')
        os.mkdir(f'data/minecraft/tags/functions')

    def compile(self):
        with open('pack.mcmeta', 'w') as file:
            file.write(
                json.dumps(
                    {
                        "pack": {
                            "pack_format": self.settings.pack_format,
                            "description": self.settings.description
                        }
                    },
                    indent=4
                )
            )

        # Generates attributes
        for attribute, function_names in self.generated.attributes.items():
            with open(f'data/minecraft/tags/functions/{attribute}.json', 'w') as file:
                file.write(
                    json.dumps(
                        {
                            "replace": False,
                            "values": [
                                f"{self.settings.prefix_generated}{self.settings.project_name}:{function_name}"
                                for function_name in function_names
                            ]
                        },
                        indent=4
                    )
                )

        # Generates used scoreboards and scores in SETUP function
        for variable in self.generated.scoreboards:
            variable.__init__(variable.name, variable.criterion)

        for variable, value in self.generated.scores:
            variable.__init__(variable.name, value, variable.scoreboard)

        self.generated.functions[f'__{const.setupFunctionName}'] = self.temporary.function
        self.temporary.function = []

        # Generates function files
        for name, function in self.generated.functions.items():
            with open(f'data/{self.settings.prefix_generated}{self.settings.project_name}/'
                      f'functions/{name}.mcfunction', 'w') as file:
                file.write('\n'.join(function))

